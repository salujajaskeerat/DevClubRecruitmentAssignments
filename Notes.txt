To install Django do ::pip install django
To check version do :: django-admin --vesion

To start django project use :: django-admin startproject <project-name>
There are 4 files that django cretes for us on its own
The files init , and settings are never touched by us.
ALso when we create a project django does is create a local server for our project.
					To run the srever :::::::: cd <to project direectory>
 										 		python3 manage.py runserver




 					Note:: One of the coolest things about django is tha we donot need to relod the terminal again and again , we just need to relod the webpage, to make the website.



APP IN DJANGO :::::		
					Every bit of part in python is called app i.e if your site has 2 section : music and books which are on different webpage then we say that these are two different apps
					To create an app in python::
					 					 python manage.py start app <app-name>
					on doing these another directory with app name will be created thus we have created an app.


					Whenever you create a app always add it to the setting.py
Managing Url in Django:::
   						there is a file called url.py with is in our default homepage app of project
   								from django.conf.urls import url
								from django.contrib import admin

								urlpatterns = [
								    url(r'^admin/', admin.site.urls),
								]


					  this is the above default code associated with it 


					  when we type /admin to website the python serves a request back which we get
					  NOTE::: The urlpatterns =[url(r'^admin/',admin.site.urls)]
					  			r :: means regular expression
					  			the first is request 
					  			the second expression is post.






					  Note:: If we want /music to be a part of urls then we need to add this to above 
					  but wait if /music conatin 10 more included webpage , then we have to add
					  /music/app1  /music/app2 
					  this will make our project very clumsy and dirty .
					  so to do that we make separate urls for each app we create 
					  ::: cd app
					  		touch urls.py

					  There we add it response to request made by user when /music is passed .

					  to link this above url to url of home page do::::


					  1. Import the include() function: from django.conf.urls import url, include
    				  2. Add a URL to urlpatterns:  url(r'^app/', include('app-name.urls'))

Views functionality :::  This is python file which will conatins python function , which will be 
						called urls in the app call it .
						These function will display html file , txt etc when they are called .
						these are very imp to be managed.......


						we will be returning Http response to every request
						so we will do is ::
						from django.http import HttpResponse

						we wiil use HttpResponse function again and again to return the responses.



Database Setup:::: To setup database in djnago we need to sync our files with the django default data-
					base , if we want to use them
					to do::
					run    python3 manage.py migrate


MODELS in Django ::::
 					Theses are present as default in every app we already have made, these contains classes that are actuallt tables forming in behin the scene , so we have to  make 
 					class then comes variable which will be our couloums ::


 					from django.db import models
 					class <table-name>(models.Model):
 						<column-name> =model.CharField(max_length=100)
                    In these fashion our models will be created 

                    when we connect two tables using foreign key we do is ::
                    in adoting table
                    make a foreign key
                    eg
                    album=models.ForeignKey(albums,on_delete=models.CASCADE)
                    This will import from table albums and import coloum called album



       WHen we have created a model then we have to add/migrate to sql database we have 
       this is done by
       ::   python3 manage.py makemigrations <app-name>
       ::: NOw :: python3 manage.py migration


       whenver we make changes in the model we run the above 2 commands




Database management in django:::::
			to manage our database we have to do the following::
					$:python3 manage.py shell
					this will run our manage.py shell



					now to check our tables run
					from app.models import <class-name1> <---> ....

					now to check anything present in imported table we so::

					<table.name>.objects.all

					We can create a object of these tables and add them to table :: <obj-name>.save()

					type::: a.id 
					to check the id which django has given it as default




					DATABASE API FUNCTION :::
							1.object.all function
											<table-nam>.objects.all()
							2.Filter function <table-name>.filter(id =2 )
												<table-name>.objects.filter(nam="jaskeerat")
							3.exit function : exit() 
							4. save functions ::: once we have created a onject of tables we pass objname.save()



------------------------------------------------------------------------------------------------------
Setting UP Admin Interface WIth Django :::::::
      typ:
         python3 manage.py createsuperuser

         // fill the details and then login to /admin 


         Now we can see all details there , so now we have to do is setup/regiter our APP's table into the admin interface:

         cd app/admin.py
         open admin.py

         there do 			::
         						from django.contrib import admin
         						from .models import <table-name>




 Managing front-end and back-end together -------------------

 1> inside your app dir make new dir called templates
 2> inside template make dir with same name as app
 3> inside this add the html pages you want in your app




NOW editing webpages html inaccordance with django:::
			1. Use python : if we want to use python we have to python code by using 
			   {%  python code  %}
			   {%end<loop-name> %}
			2. if we want to use variables then use ::: {{variable-name}}

			the above variable is passed by us into the page ::



			now we have to import this file in our views page where we will manage it:

			from django.template import loader

			// loader module has functions ::: loader.get_template('diectory of html webpage')

			In your function inside the views.py store the html file as a variable in the function
			which you want to load 



                 an example:::: we have here is 

				def index(request):
				all_albums=albums.object.all()
				#will store all conetnt from table album
				template=loader.get_template('music/index.html')
				#will store the file index.html
				content={'all_albums':all_albums}
				# store the content in form of dictionary

				return HttpResponse(template.render(content,request))
			     # this will render the html page , by sneding the content and request




Render functions ::: This makes our code look easy and neat
					1. We donot need to store html file in here 
					2. we donot need http module as it is built in

					eg. return render(response,<pathof-file> , variables-needed)

					also NOTE::: from django.shortcuts import render 

Raising a http404 error::---------------------------------------------------------

Suppose user passed a album which is not wvwn present in the data base then 

from django.http import Http4

try:
	code
except <table-naame>.DoesNotExist:
	raise Http4('message')


Connecting two table:::(very important)
 Since we know that to connect two tables they must have 1 key in common thus we need foreign key in one.

 to do :: 1> create object of table 1
 		  2> Now do:: oject1.<table2in_lowercase>_set.create(pass the variables)
 		  				the above automatically create and save oject of table 2 in database.

 		  3> To know number of times object2 created in table2 ::
 		  								object1.<table2InLowerCase>_set.count()
          4 > to get all the data linked with obj1 in obj2 we do is ::
          		object1.<table2InLowercase>_set.all()
          		the above return all the data in form of dictionaries

Removing Hard-coded Urls::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
-----------------------------------------------------------------------------------------


The url wich we link in href as "music/{{ album.id }}"
 is not a good practice , we can improve this part 
when we created urls.py , there in function which we passed had assigned names to these functions 


first go to url.py file of that app
then write the app_name=" music  "

we can replace above with   "{% url '<music:name>' album.id %}"  it is understood as "music/{{ album.id }}"



http 404 shortcut ::
we can also use   from django.shortcut import render , get_object_or_404
					# the function get_object_or_404 is pretty nice and clean 
					obj=get_object_or_404(<table-name>,id=album_id)

					this automatically manages the error




Note::: urls are not only to go to other site but they also used to make some functions






Error message::::

if suppose user give wrong username or password or anything else then we must do is redirect it to
same page and then show him the error message

{% if error_message %}
<p>Yoour password is wrong </p>
{% endif %}



WOrking with the FORMS ::::
<form action="url" method=POST > 

code goes here
</form>

action :: this is the url which form goes and it POST type as shown in meathod



csrf token ::: To protect your site from malicious attacks add {% csrf_token %}   inside the forms0 .





Generic Views:::
Thes will be the Things we will be using instead of render function .

from django.views import generic
from models import <table-name>



	There are two types of generic views which we will study::
	List generic view 
	details generic view


	class classname (generic.ListView):
		template_name="review/index.html"